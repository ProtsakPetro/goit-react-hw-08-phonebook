{"version":3,"file":"static/js/866.0431c950.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.jsx","reduxe/contact/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { createContactThunk } from '../../reduxe/contact/thunks';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { Box, Button, TextField } from '@mui/material';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const { contacts } = useSelector(state => state.contacts);\n  const dispatch = useDispatch();\n\n  const addContact = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    const isTrue = contacts.some(contact => name === contact.name);\n    if (isTrue) {\n      Notify.failure(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(createContactThunk({ name, number, id: nanoid() }));\n    setName('');\n    setNumber('');\n  };\n\n  const getContactData = ({ target: { name, value } }) => {\n    if (name === 'name') setName(value);\n    else setNumber(value);\n  };\n\n  return (\n<Box component=\"form\" onSubmit={addContact} noValidate sx={{ mt: 1 }}>\n<TextField\n  margin=\"normal\"\n  required\n  fullWidth\n  id=\"filled-basic\"\n  label=\"Name\"\n  variant=\"filled\"\n  type=\"text\"\n  name=\"name\"\n  pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  autoComplete=\"off\"\n  value={name}\n  InputProps={{\n    sx: { borderRadius: '15px' },\n    style: { color: '#fff' },\n  }}\n  onChange={getContactData}\n/>\n\n  <TextField\n    margin=\"normal\"\n    required\n    fullWidth\n    id=\"filled-basic\"\n    label=\"Number\"\n    variant=\"filled\"\n    type=\"tel\"\n    name=\"number\"\n    pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n    autoComplete=\"off\"\n    onChange={getContactData}\n    value={number}\n    InputProps={{\n      sx: { borderRadius: '15px' },\n      style: { color: '#fff' },\n         }}\n  />\n\n  <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ borderRadius: '15px', mt: 3, mb: 2 }}>\n    ADD CONTACT\n  </Button>\n</Box>\n\n  );\n};\nexport default ContactForm;","import { useDispatch } from 'react-redux';\nimport { deleteContactThunk, updateContactThunk } from '../../reduxe/contact/thunks';\nimport {\n  Avatar,\n  Box,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  TextField,\n} from '@mui/material';\nimport CheckCircleOutlineTwoToneIcon from '@mui/icons-material/CheckCircleOutlineTwoTone';\nimport { useState } from 'react';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport ClearIcon from '@mui/icons-material/Clear';\n\nconst ContactListItem = ({ contacts }) => {\n  const [contactEditing, setContactEditing] = useState(null);\n  const dispatch = useDispatch();\n  return contacts.map(({ id, name, number }) => {\n    return contactEditing === id ? (\n      <ListItem\n        key={id}\n        sx={{\n          height: '72px',\n          bgcolor: '#f7faff',\n          borderRadius: '15px',\n          mb: '10px',\n        }}\n        secondaryAction={\n          <Box\n            sx={{\n              display: 'flex',\n              gap: '10px',\n            }}\n          >\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => setContactEditing(null)}\n            >\n              <ClearIcon />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContactThunk(id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Box>\n        }\n      >\n        <ListItemAvatar>\n          <Avatar>{name[0]}</Avatar>\n        </ListItemAvatar>\n        <Box\n          component=\"form\"\n          onSubmit={evt => {\n            evt.preventDefault();\n            const { contactName, contactNumber } = evt.target.elements;\n            const newData = {\n              id,\n              name: contactName.value,\n              number: contactNumber.value,\n            };\n            dispatch(updateContactThunk(newData));\n            setContactEditing(null);\n          }}\n          noValidate\n          sx={{ mt: 1, display: 'flex', maxWidth: '300px', gap: '10px' }}\n        >\n          <TextField\n            name=\"contactName\"\n            defaultValue={name}\n            id=\"standard-basic\"\n            variant=\"standard\"\n          />{' '}\n          <TextField\n            name=\"contactNumber\"\n            defaultValue={number}\n            id=\"standard-basic\"\n            variant=\"standard\"\n          />\n          <IconButton aria-label=\"done\" color=\"success\" type=\"submit\">\n            <CheckCircleOutlineTwoToneIcon />\n          </IconButton>\n        </Box>\n      </ListItem>\n    ) : (\n      <ListItem\n        key={id}\n        sx={{ bgcolor: '#f7faff', borderRadius: '15px', mb: '10px' }}\n        secondaryAction={\n          <Box sx={{ display: 'flex', gap: '10px' }}>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => setContactEditing(id)}\n            >\n              <EditIcon />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={() => dispatch(deleteContactThunk(id))}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Box>\n        }\n      >\n        <ListItemAvatar>\n          <Avatar>{name[0]}</Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={name} secondary={number} />\n      </ListItem>\n    );\n  });\n};\n\nexport default ContactListItem;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts;\n\nexport const selectFilter = state => state.filter;\n\nexport const filteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  ({ contacts }, { filter }) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);","import { List, Typography } from '@mui/material';\nimport ContactListItem from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { filteredContacts } from '../../reduxe/contact/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(filteredContacts);\n  return contacts.length > 0 ? (\n    <List>\n      <ContactListItem contacts={contacts} />\n    </List>\n  ) : (\n    <Typography component=\"p\" align=\"center\" paddin='25px' color='#706f6f'>\n    Have no contacts yet\n  </Typography>\n  \n  );\n};\n\nexport default ContactList;","import { setFilter } from '../../reduxe/filter/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Box, TextField } from '@mui/material';\nimport { selectContacts } from '../../reduxe/contact/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const getFilterData = ({ target: { value } }) => {\n    dispatch(setFilter(value));\n  };\n  return (\n    contacts.length > 0 && (\n     <Box noValidate sx={{ mt: 1 }}>\n  <TextField\n    fullWidth\n    type=\"text\"\n    name=\"filter\"\n    onChange={getFilterData}\n    label=\"Find contacts by Name\"\n    variant=\"standard\"\n    sx={{ borderRadius: '30px' }}\n  />\n</Box>\n\n    )\n  );\n};\n\nexport default Filter;","import { Container } from '@mui/material';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllContactsThunk } from '../../reduxe/contact/thunks';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllContactsThunk());\n  }, [dispatch]);\n  return (\n    <Container\n      component=\"main\"\n      maxWidth=\"md\"\n      sx={{\n        backgroundColor: '#9a9898',\n        borderRadius: '15px',\n        boxShadow: 'rgba(0, 0, 0, 0.7)',\n        marginTop: '150px',\n        padding: '30px',\n        width: '1000px',\n             }}\n    >\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default ContactsPage;"],"names":["_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","contacts","useSelector","state","dispatch","useDispatch","getContactData","_ref","_ref$target","target","value","_jsxs","Box","component","onSubmit","e","stopPropagation","preventDefault","some","contact","Notify","concat","createContactThunk","id","nanoid","noValidate","sx","mt","children","_jsx","TextField","margin","required","fullWidth","label","variant","type","pattern","title","autoComplete","InputProps","borderRadius","style","color","onChange","Button","mb","contactEditing","setContactEditing","map","_ref2","ListItem","height","bgcolor","secondaryAction","display","gap","IconButton","edge","onClick","ClearIcon","deleteContactThunk","DeleteIcon","ListItemAvatar","Avatar","evt","_evt$target$elements","elements","contactName","contactNumber","newData","updateContactThunk","maxWidth","defaultValue","CheckCircleOutlineTwoToneIcon","EditIcon","ListItemText","primary","secondary","selectContacts","filteredContacts","createSelector","filter","_ref3","toLowerCase","includes","trim","length","List","ContactListItem","Typography","align","paddin","setFilter","useEffect","getAllContactsThunk","Container","backgroundColor","boxShadow","marginTop","padding","width","ContactForm","Filter","ContactList"],"sourceRoot":""}